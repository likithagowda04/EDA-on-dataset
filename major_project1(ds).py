# -*- coding: utf-8 -*-
"""Major_Project1(DS).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UNLwXiYavxaSR1ZjuKT-iNHg_7zFja6y
"""

from google.colab import drive

drive.mount('/content/drive')

#using a data set of employee data
#performing EDA(Exploratory Data Analysis)on the data set
#using panda libraries to read the data set
import pandas as pd
data=pd.read_csv('/content/drive/MyDrive/dataset/employee_data.csv')
data

#to access first n rows of a data set
data.head()

#getting information about the data set
data.info()

#no.of rows and columns in the data set
data.shape

#no.of rows and columns in the data set
data.size

#checking if there are any null values
data.isnull().sum()

#Slicing -- accessing parts of sequence of the data set
#performing slicing
#data[inclusive:exclusive]
data[16:38]

#performing slicing on both rows and columns simultaneously
#data.iloc[row slicing,column slicing]
data.iloc[25:56, 2:8]

#to find out unique groups of employees
data1 = data.groups.unique()
data1

e_group=data.groups.head()
print(e_group)

#no.of unique groups of employeea
group = data.groups.nunique()
group

#no.of unique ages of employee
Age = data.age.nunique()
Age

#no.of unique employee salaries
e_salary=data.salary.nunique()
e_salary

#to group the no.of employees according to their groups
#sort=false, By default,group by is sorting in alphabetical order
#we do not want that,hence sort = false
data2=data.groupby('groups',sort=False).size()
data2

#to group the no.of employees by their age
e_age=data.groupby('age',sort=False).size()
e_age

#to group the no.of employees by their salaries
Salary=data.groupby('salary',sort=False).size()
Salary

#visualization - bar plot
import matplotlib.pyplot as plt
bar_width =0.8
plt.bar(data1,data2,color= ['red','pink','blue','green'])
plt.title('Bar Chart')
plt.xlabel('Groups')
plt.ylabel('No.of Employees')

import numpy as np
import matplotlib.pyplot as plot
np.random.seed(10)
x1 = np.random.randint(1,50,30)
x1 = np.sort(x1)
x2 = np.random.randint(10000,70000,30)
plt.plot(x1,x2)
plt.title('Line chart')
plt.xlabel('x-axis')
plt.ylabel('Y-axis')

x1min=min(x1)
x1max=max(x1)
x2min=min(x2)
x2max=max(x2)
x1norm = (x1 - x1min)/(x1max - x1min)
x2norm = (x2 - x2min)/(x2max - x2min)
plt.plot(x1norm,x2norm)
plt.title('Line Chart')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

data3 = data[['healthy_eating','active_lifestyle']].head()
data3

hea_eat= data.healthy_eating.head()
hea_eat

act_life = data.active_lifestyle.head()
act_life

#visualization- Line plot
import matplotlib.pyplot as plt
plt.plot(hea_eat,act_life)
plt.title('Line chart')
plt.xlabel('Active_lifestyle')
plt.ylabel('Healthy_Eating')

#dividing the data into input and output
#input(x)=healthy_eating,output(y)=active_lifestyle
x=hea_eat.iloc[:].values
x

y=act_life.iloc[:].values
y

#visualization-scatter plot
import matplotlib.pyplot as plt
plt.scatter(x,y,color='blue',marker='*')

#divide the data into inputs and outputs
#input(x)-Area,output(y)
#input is always 2 dimensional,output is always 1 dimensional array
x=data3.iloc[:,0:1].values
x

y=data3.iloc[:,1].values
y

#running a suitable algorithm-Linear regression
from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x,y)

#predict the output
y_pred=model.predict(x)
y_pred

#ouput values
x

#actual output value
y

#individual predictiom
model.predict([[4]])

#cross-verification technique
#equation of straight line:y=mx+c
#y=dependent variable
#m=slope
#x=Independent variable
#c=constant
#calculating slope m
m = model.coef_
m

#calculating intercept
c = model.intercept_
print(c)

m * 100 + c

#visualization of best fit line
import matplotlib.pyplot as plt
plt.scatter(x,y,color='orange',marker='d')
plt.plot(x,y_pred,c='lime')
plt.title('Best-Fit Line')

#calculating accuracy of model
from sklearn.metrics import accuracy_score
accuracy_score(x,y)*100

